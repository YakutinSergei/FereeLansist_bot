from datetime import datetime, timedelta

import asyncpg

from environs import Env


env = Env()
env.read_env()

#–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
async def db_connect():
    try:
        conn = await asyncpg.connect(user=env('user'),  password=env('password'), database=env('db_name'), host=env('host'))

        '''
        –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ statuses
        id_status - –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞
        name - –∏–º—è —Å—Ç–∞—Ç—É—Å–∞
        '''

        await conn.execute('''CREATE TABLE IF NOT EXISTS statuses(id_status SERIAL PRIMARY KEY,
                                                                    name TEXT);''')

        '''
        –¢–∞–±–ª–∏—Ü–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π specializations
        id_specialization - –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        name - –∏–º—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        '''
        await conn.execute('''CREATE TABLE IF NOT EXISTS specializations(id_specialization SERIAL PRIMARY KEY,
                                                                    name TEXT);''')


        '''
        –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ customers
        id_user - –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—Ä—è–¥–∫—É
        tg_id - id —Ç–µ–ª–µ–≥—Ä–∞–º–º
        name - –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
        '''
        await conn.execute('''CREATE TABLE IF NOT EXISTS customers(id_user SERIAL NOT NULL PRIMARY KEY,
                                                                    tg_id BIGSERIAL,
                                                                    name TEXT);''')

        '''
        –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π performers
        id_user - –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—Ä—è–¥–∫—É
        tg_id - id —Ç–µ–ª–µ–≥—Ä–∞–º–º
        name - –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
        number_workers - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö
        id_status - —Å—Ç–∞—Ç—É—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        rating - —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50
        id_specialization - –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        '''
        await conn.execute('''CREATE TABLE IF NOT EXISTS performers(id_user SERIAL NOT NULL PRIMARY KEY,
                                                                    tg_id BIGSERIAL,
                                                                    name TEXT,
                                                                    number_workers INTEGER DEFAULT '1', 
                                                                    id_status INTEGER REFERENCES statuses(id_status) NOT NULL,
                                                                    rating INTEGER DEFAULT '50',
                                                                    id_specialization INTEGER REFERENCES specializations(id_specialization) NOT NULL);''')

        '''
        –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        id_order - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        id_user - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã customers
        place - –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        price - –ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–±–æ—Ç—É
        date_of_creation - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        date_completion - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
        time_completion - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
        num_of_performers - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        id_specialization - –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        description - –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç       
        checked - –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∑–∞–∫–∞–∑        

        '''

        await conn.execute('''CREATE TABLE IF NOT EXISTS orders(id_order SERIAL NOT NULL PRIMARY KEY,
                                                                    id_user INTEGER REFERENCES customers(id_user) NOT NULL,
                                                                    place TEXT,
                                                                    price INTEGER,
                                                                    date_of_creation TIMESTAMP,
                                                                    date_completion DATE,
                                                                    time_completion TIME,
                                                                    num_of_performers INTEGER,
                                                                    id_specialization INTEGER REFERENCES specializations(id_specialization) NOT NULL, 
                                                                    description TEXT,
                                                                    checked INTEGER DEFAULT '0');''')

        '''
        –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π executors_orders
        id_user - –Ω–æ–º–µ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã performers
        id_order - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        selected - –≤—ã–±—Ä–∞–Ω –ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        checked - –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∑–∞–∫–∞–∑        
        '''
        await conn.execute('''CREATE TABLE IF NOT EXISTS executors_orders(id_user INTEGER REFERENCES performers(id_user) NOT NULL,
                                                                            id_order INTEGER REFERENCES orders(id_order) NOT NULL,
                                                                            selected INTEGER DEFAULT '0',
                                                                            checked INTEGER DEFAULT '0');''')

        '''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É'''
        # await conn.execute(f'''INSERT INTO specializations(name)
        #                               VALUES('üîå–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫'),
        #                                     ('üë∑üèº‚Äç‚ôÇÔ∏è–†–∞–±–æ—á–∏–π'),
        #                                     ('üì∫–≠–∫—Ä–∞–Ω—â–∏–∫'),
        #                                     ('üéâ–î–µ–∫–æ—Ä–∞—Ç–æ—Ä')
        #                     ''')
        #
        # await conn.execute(f'''INSERT INTO statuses(name)
        #                               VALUES('üîç–í –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã'),
        #                                     ('‚è≥–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å')
        #                     ''')


    except Exception as _ex:
        print('[INFO] Error ', _ex)

    finally:
          if conn:
            await conn.close()
            print('[INFO] PostgresSQL closed')