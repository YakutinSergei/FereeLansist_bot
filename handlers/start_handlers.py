from datetime import timedelta, datetime

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot_menu.menu import create_inline_kb, menu_performer, menu_customer, my_order, kb_user_score
from config_data import apsh
from create_bot import bot
from database.orm import bd_get_user_status, bd_add_performer, get_user_profile, bd_add_customer, \
    get_user_profile_customer, bd_get_order, get_order_info, get_users_order, get_user_completed, bd_get_orders_user
from lexicon.lex_ru import lx_common_phrases, LEXICON_RU

router: Router = Router()

#FSM –Ω–∞ –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class FSMperformer_add(StatesGroup):
    name = State()
    specialization = State()
    count = State()

#FSM –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
class FSMcustomer_add(StatesGroup):
    name = State()

#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
@router.message(F.text == LEXICON_RU['profile'])
async def process_start_command(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # 0 - –Ω–µ—Ç 1 - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 2 - –∑–∞–∫–∞–∑—á–∏–∫
    user_status = await bd_get_user_status(tg_id=message.from_user.id)
    if user_status == 0:
        await message.answer(text=lx_common_phrases['start_text'],
                             reply_markup=await create_inline_kb(1,
                                                                 'chRole_',
                                                                  LEXICON_RU['performer'],
                                                                   LEXICON_RU['customer']
                                                                   ))
    elif user_status == 1:
        user = await get_user_profile(tg_id=message.from_user.id)
        txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                       f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {user[0]['name']}\n"
                       f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</b>: {user[0]['specialization']}\n"
                       f"<b>–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: {user[1]['count']}\n"
                       f"<b>–†–µ–π—Ç–∏–Ω–≥</b>: {user[0]['rating']}\n"
                       f"<b>–°—Ç–∞—Ç—É—Å</b>: {user[0]['status']}\n")

        await message.answer(text=txt_profile, reply_markup=await create_inline_kb(1,
                                                                                    'changeStatus',
                                                                                    LEXICON_RU[
                                                                                        'change_status']))
    else:
        user = await get_user_profile_customer(tg_id=message.from_user.id)
        txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                       f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {user['customer_name']}\n"
                       f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>: {user['active_orders_count']}\n"
                       f"<b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: {user['completed_orders_count']}\n")

        await message.answer(text=txt_profile, reply_markup=menu_customer.as_markup(resize_keyboard=True))


#–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
@router.callback_query(F.data.startswith('cancel_'))
async def process_specializations_name(callback: CallbackQuery, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    if user_status == 0:
        await callback.message.answer(text=lx_common_phrases['cancel_choice'])
        await state.clear()
        await callback.answer()
    else:
        await callback.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏‚ÄºÔ∏è', show_alert=True)


#–í—ã–±–æ—Ä –∫–µ–º —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@router.callback_query(F.data.startswith('chRole_'))
async def process_choice_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split('_')[1]
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    if user_status == 0:
        if role == LEXICON_RU['performer']: # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await callback.message.answer(text=lx_common_phrases['enter_name'],
                                          reply_markup=await create_inline_kb(1,
                                                                            'cancel_',
                                                                            LEXICON_RU['cancel']))
            await state.set_state(FSMperformer_add.name)

        elif role == LEXICON_RU['customer']: # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞
            await callback.message.answer(text=lx_common_phrases['enter_name'],
                                          reply_markup=await create_inline_kb(1,
                                                                              'cancel_',
                                                                              LEXICON_RU['cancel']))
            await state.set_state(FSMcustomer_add.name)

    else:
        await callback.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏‚ÄºÔ∏è', show_alert=True)

    await callback.answer()


# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø
@router.message(StateFilter(FSMperformer_add.name))
async def process_executor_name(message: Message, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=message.from_user.id)

    if user_status == 0:
        await state.update_data(name=message.text)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö\n',
                             reply_markup=await create_inline_kb(1,
                                                                 'ordCancel_',
                                                                 LEXICON_RU['cancel']))
        await state.set_state(FSMperformer_add.count)
    else:
        await message.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚ÄºÔ∏è', show_alert=True)


'''–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö'''
#count
@router.message(StateFilter(FSMperformer_add.count))
async def process_count_name(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(count=message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º FSM, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö
        await message.answer(text=lx_common_phrases['choice_specializations'],
                             reply_markup=await create_inline_kb(1,
                                                                 'chSpec_',
                                                                 LEXICON_RU['porter'],
                                                                 LEXICON_RU['electrician'],
                                                                 LEXICON_RU['plumber'],
                                                                 LEXICON_RU['it-professional']
                                                                 ))
        await state.set_state(FSMperformer_add.specialization)
    else:
        await message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ó–∞–∫–∞–∑—á–∏–∫–∞
@router.message(StateFilter(FSMcustomer_add.name))
async def process_customer_name(message: Message, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=message.from_user.id)
    if user_status == 0:
        name = message.text
        await bd_add_customer(message.from_user.id, name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞
        await state.clear()
        txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                       f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {name}\n"
                       f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>: 0\n"
                       f"<b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: 0\n")
        await message.answer(text=lx_common_phrases['creating_profile'],
                             reply_markup=menu_customer.as_markup(resize_keyboard=True))

        await message.answer(text=txt_profile)



# –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@router.callback_query(StateFilter(FSMperformer_add.specialization))
async def process_specializations_name(callback: CallbackQuery, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    if user_status == 0:

        specialization = callback.data.split('_')[1] # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        '''–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∞'''
        if specialization == LEXICON_RU['cancel']:
            await callback.message.answer(text=lx_common_phrases['cancel_choice'])
            await state.clear()
        else:
            await state.update_data(specialization=specialization) # –û–±–Ω–æ–≤–ª—è–µ–º FSM
            performer = await state.get_data() # –ó–∞–ø–∏—Å—ã–≤—ã–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
            await bd_add_performer(callback.from_user.id, performer) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await state.clear()
            txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                           f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {performer['name']}\n"
                           f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</b>: {specialization}\n"
                           f"<b>–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: 0\n"
                           f"<b>–†–µ–π—Ç–∏–Ω–≥</b>: 50\n"
                           f"<b>–°—Ç–∞—Ç—É—Å</b>: üîç–í –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã")

            await callback.message.answer(text=lx_common_phrases['creating_profile'], reply_markup=menu_performer.as_markup(resize_keyboard=True))
            await callback.message.answer(text=txt_profile, reply_markup= await create_inline_kb(1,
                                                                                                 'changeStatus',
                                                                                                 LEXICON_RU['change_status']))
    else:
        await callback.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏‚ÄºÔ∏è', show_alert=True)

    await callback.answer()



# –ö–Ω–æ–ø–∫–∞ –º–æ–∏ –∑–∞–∫–∞–∑—ã
@router.message(F.text == LEXICON_RU['my_orders'])
async def process_my_order(message: Message):
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # 0 - –Ω–µ—Ç 1 - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 2 - –∑–∞–∫–∞–∑—á–∏–∫
    user_status = await bd_get_user_status(tg_id=message.from_user.id)

    if user_status == 1:
        #–ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders_user = await bd_get_orders_user(tg_id=message.from_user.id)
        if orders_user:
            await message.answer(text=lx_common_phrases['my_order'],
                                 reply_markup=await my_order(N=0,
                                                             role='executorOrder',
                                                             orders=orders_user
                                                             ))
        else:
            await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')

    elif user_status == 2:
        customer_order = await bd_get_order(tg_id=message.from_user.id) # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
        if customer_order:
            await message.answer(text=lx_common_phrases['my_order'],
                                 reply_markup=await my_order(N=0,
                                                              role='customerOrder',
                                                              orders=customer_order
                                                              ))
        else:
            await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')

'''–õ–∏—Å—Ç–∞–Ω–∏–µ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫–∞'''
@router.callback_query(F.data.startswith('myOrder_'))
async def paging_order(callback: CallbackQuery):
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    action = callback.data.split('_')[-1]
    if user_status == 1:
        if action == 'forward':
            N = int(callback.data.split('_')[1])
            orders_user = await bd_get_orders_user(tg_id=callback.from_user.id)
            await callback.message.edit_reply_markup(reply_markup=await my_order(N=N,
                                                                                 role='executorOrder',
                                                                                 orders=orders_user
                                                                                 ))
        elif action == 'backward':
            N = int(callback.data.split('_')[1])
            orders_user = await bd_get_orders_user(tg_id=callback.from_user.id)
            if N - 8 > 0:
                if N < 16:
                    N = N - 15
                else:
                    N = (((N) // 8) * 8) - 16
                await callback.message.edit_reply_markup(reply_markup=await my_order(N=N,
                                                                                     role='executorOrder',
                                                                                     orders=orders_user
                                                                                     ))
    elif user_status == 2:

        #–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
        if action == 'forward':
            N = int(callback.data.split('_')[1])
            customer_order = await bd_get_order(tg_id=callback.from_user.id)
            if N < len(customer_order):
                await callback.message.edit_reply_markup(reply_markup=await my_order(N=N,
                                                                                     role='customerOrder',
                                                                                     orders=customer_order
                                                                                     ))
        elif action == 'backward':
            N = int(callback.data.split('_')[1])
            customer_order = await bd_get_order(tg_id=callback.from_user.id)
            if N - 8 > 0:
                if N < 16:
                    N = N - 15
                else:
                    N = (((N) // 8) * 8) - 16
                await callback.message.edit_reply_markup(reply_markup=await my_order(N=N,
                                                                                     role='customerOrder',
                                                                                     orders=customer_order
                                                                                     ))
    await callback.answer()

'''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –∑–∞–∫–∞–∑—á–∏–∫'''
@router.callback_query(F.data.startswith('customerOrder_'))
async def info_order_customer(callback: CallbackQuery):
    id_order = int(callback.data.split('_')[-1])
    order = await get_order_info(id_order)
    if (datetime.now() - (order['date_of_creation'] + timedelta(hours=3))) > timedelta(hours=3):
        status = lx_common_phrases['my_order_activ']
    else:
        status = lx_common_phrases['status_order_search']

    text = (f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {id_order}\n"
            f"<b>üìç–ú–µ—Å—Ç–æ:</b> {order['place']}\n"
            f"<b>üìÜ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</b>: {order['date_completion']} –≥. {order['time_completion']}\n"
            f"<b>üí∞–¶–µ–Ω–∞</b>: {order['price']}\n"
            f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç</b>: {order['description']}\n"
            f"<b>üî¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö</b>: {order['num_of_performers']}\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>: {status}")
    await callback.message.answer(text=text, reply_markup=await create_inline_kb(1,
                                                                                f'stOrder_{id_order}_',
                                                                                 LEXICON_RU['—Åompleted'],
                                                                                 LEXICON_RU['cancel']
                                  ))
    await callback.answer()

'''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'''
@router.callback_query(F.data.startswith('executorOrder_'))
async def info_order_customer(callback: CallbackQuery):
    id_order = int(callback.data.split('_')[-1])
    order = await get_order_info(id_order)
    if (datetime.now() - (order['date_of_creation'] + timedelta(hours=3))) > timedelta(hours=3):
        status = lx_common_phrases['my_order_activ']
    else:
        status = lx_common_phrases['status_order_search']

    text = (f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {id_order}\n"
            f"<b>üìç–ú–µ—Å—Ç–æ:</b> {order['place']}\n"
            f"<b>üìÜ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</b>: {order['date_completion']} –≥. {order['time_completion']}\n"
            f"<b>üí∞–¶–µ–Ω–∞</b>: {order['price']}\n"
            f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç</b>: {order['description']}\n"
            f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>: {status}")
    await callback.message.answer(text=text, reply_markup=await create_inline_kb(1,
                                                                                 f'exOrder_{id_order}_',
                                                                                 LEXICON_RU['—Åompleted']))
    await callback.answer()

'''–ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'''
@router.callback_query(F.data.endswith(LEXICON_RU['—Åompleted']))
async def proces_order_completed(callback: CallbackQuery):
    id_order = int(callback.data.split('_')[1])
    #–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    users_order = await get_users_order(id_order)
    if users_order:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text='–û—Ü–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–∞–∫–∞–∑–∞\n\n',
                                    reply_markup=await kb_user_score(users_order, id_order))

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞, –ø–µ—Ä–µ–¥–∞–µ–º id_order –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
        scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        scheduler.add_job(apsh.completed_user_order, 'date', run_date=datetime.now() + timedelta(seconds=15),
                          args=(id_order,))
        scheduler.start()

    await callback.answer()

'''–ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å'''
@router.callback_query(F.data.startswith('estimatio_'))
async def increase_order_user(callback: CallbackQuery):
    id_user = int(callback.data.split('_')[2])# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id_order = int(callback.data.split('_')[-1])#I D –∑–∞–∫–∞–∑–∞
    N = int(callback.data.split('_')[1]) # –†–µ–π—Ç–∏–Ω–≥
    await get_user_completed(id_user=id_user, id_order=id_order, N=N)
    users_order = await get_users_order(id_order)
    if users_order:
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text='–û—Ü–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–∞–∫–∞–∑–∞\n\n',
                                    reply_markup=await kb_user_score(users_order, id_order))
    else:
        await bot.delete_message(chat_id=callback.from_user.id,
                                 message_id=callback.message.message_id)
    await callback.answer()
