from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from bot_menu.menu import create_inline_kb, menu_performer, menu_customer
from database.orm import bd_get_user_status, bd_add_performer, get_user_profile, bd_add_customer, \
    get_user_profile_customer
from lexicon.lex_ru import lx_common_phrases, LEXICON_RU

router: Router = Router()

#FSM –Ω–∞ –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class FSMperformer_add(StatesGroup):
    name = State()
    specialization = State()

#FSM –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
class FSMcustomer_add(StatesGroup):
    name = State()

#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
@router.message(F.text == LEXICON_RU['profile'])
async def process_start_command(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # 0 - –Ω–µ—Ç 1 - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 2 - –∑–∞–∫–∞–∑—á–∏–∫
    user_status = await bd_get_user_status(tg_id=message.from_user.id)
    if user_status == 0:
        await message.answer(text=lx_common_phrases['start_text'],
                             reply_markup=await create_inline_kb(1,
                                                                 'chRole_',
                                                                  LEXICON_RU['performer'],
                                                                   LEXICON_RU['customer']
                                                                   ))
    elif user_status == 1:
        user = await get_user_profile(tg_id=message.from_user.id)
        txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                       f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {user[0]['name']}\n"
                       f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</b>: {user[0]['specialization']}\n"
                       f"<b>–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: {user[1]['count']}\n"
                       f"<b>–†–µ–π—Ç–∏–Ω–≥</b>: {user[0]['rating']}\n"
                       f"<b>–°—Ç–∞—Ç—É—Å</b>: {user[0]['status']}\n")

        await message.answer(text=txt_profile, reply_markup=await create_inline_kb(1,
                                                                                    'changeStatus',
                                                                                    LEXICON_RU[
                                                                                        'change_status']))
    else:
        user = await get_user_profile_customer(tg_id=message.from_user.id)
        txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                       f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {user['customer_name']}\n"
                       f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>: {user['active_orders_count']}\n"
                       f"<b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: {user['completed_orders_count']}\n")

        await message.answer(text=txt_profile, reply_markup=menu_customer.as_markup(resize_keyboard=True))


#–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
@router.callback_query(F.data.startswith('cancel_'))
async def process_specializations_name(callback: CallbackQuery, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    if user_status == 0:
        await callback.message.answer(text=lx_common_phrases['cancel_choice'])
        await state.clear()
        await callback.answer()
    else:
        await callback.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏‚ÄºÔ∏è', show_alert=True)


#–í—ã–±–æ—Ä –∫–µ–º —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@router.callback_query(F.data.startswith('chRole_'))
async def process_choice_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split('_')[1]
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    if user_status == 0:
        if role == LEXICON_RU['performer']: # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await callback.message.answer(text=lx_common_phrases['enter_name'],
                                          reply_markup=await create_inline_kb(1,
                                                                            'cancel_',
                                                                            LEXICON_RU['cancel']))
            await state.set_state(FSMperformer_add.name)

        elif role == LEXICON_RU['customer']: # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞
            await callback.message.answer(text=lx_common_phrases['enter_name'],
                                          reply_markup=await create_inline_kb(1,
                                                                              'cancel_',
                                                                              LEXICON_RU['cancel']))
            await state.set_state(FSMcustomer_add.name)

    else:
        await callback.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏‚ÄºÔ∏è', show_alert=True)

    await callback.answer()


# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø
@router.message(StateFilter(FSMperformer_add.name))
async def process_executor_name(message: Message, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=message.from_user.id)

    if user_status == 0:
        await state.update_data(name=message.text)
        await message.answer(text=lx_common_phrases['choice_specializations'],
                             reply_markup=await create_inline_kb(1,
                                                                 'chSpec_',
                                                                 LEXICON_RU['porter'],
                                                                 LEXICON_RU['electrician'],
                                                                 LEXICON_RU['plumber'],
                                                                 LEXICON_RU['it-professional'],
                                                                 LEXICON_RU['cleaner'],
                                                                 LEXICON_RU['cancel']
                                                                 ))
        await state.set_state(FSMperformer_add.specialization)
    else:
        await message.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚ÄºÔ∏è', show_alert=True)

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ó–∞–∫–∞–∑—á–∏–∫–∞
@router.message(StateFilter(FSMcustomer_add.name))
async def process_customer_name(message: Message, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=message.from_user.id)
    if user_status == 0:
        name = message.text
        await bd_add_customer(message.from_user.id, name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞
        await state.clear()
        txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                       f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {name}\n"
                       f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>: 0\n"
                       f"<b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: 0\n")
        await message.answer(text=lx_common_phrases['creating_profile'],
                             reply_markup=menu_customer.as_markup(resize_keyboard=True))

        await message.answer(text=txt_profile)



# –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@router.callback_query(StateFilter(FSMperformer_add.specialization))
async def process_specializations_name(callback: CallbackQuery, state: FSMContext):
    user_status = await bd_get_user_status(tg_id=callback.from_user.id)
    if user_status == 0:

        specialization = callback.data.split('_')[1] # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        '''–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∞'''
        if specialization == LEXICON_RU['cancel']:
            await callback.message.answer(text=lx_common_phrases['cancel_choice'])
            await state.clear()
        else:
            await state.update_data(specialization=specialization) # –û–±–Ω–æ–≤–ª—è–µ–º FSM
            performer = await state.get_data() # –ó–∞–ø–∏—Å—ã–≤—ã–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
            await bd_add_performer(callback.from_user.id, performer) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await state.clear()
            txt_profile = (f"<b><i>üåü–ü–†–û–§–ò–õ–¨üåü</i></b>\n\n"
                           f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</b>: {performer['name']}\n"
                           f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</b>: {specialization}\n"
                           f"<b>–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤</b>: 0\n"
                           f"<b>–†–µ–π—Ç–∏–Ω–≥</b>: 50\n"
                           f"<b>–°—Ç–∞—Ç—É—Å</b>: üîç–í –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã")

            await callback.message.answer(text=lx_common_phrases['creating_profile'], reply_markup=menu_performer.as_markup(resize_keyboard=True))
            await callback.message.answer(text=txt_profile, reply_markup= await create_inline_kb(1,
                                                                                                 'changeStatus',
                                                                                                 LEXICON_RU['change_status']))
    else:
        await callback.answer(text='‚ÄºÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏‚ÄºÔ∏è', show_alert=True)

    await callback.answer()



